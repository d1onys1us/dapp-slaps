export const taikoL2ABI = [
  {
    type: "constructor",
    inputs: [{ type: "address", name: "_addressManager", internalType: "address" }],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "address", name: "", internalType: "address" }],
    name: "addressManager",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "anchor",
    inputs: [
      { type: "uint256", name: "l1Height", internalType: "uint256" },
      { type: "bytes32", name: "l1Hash", internalType: "bytes32" },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "bytes32", name: "", internalType: "bytes32" }],
    name: "getBlockHash",
    inputs: [{ type: "uint256", name: "number", internalType: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "tuple",
        name: "config",
        internalType: "struct TaikoData.Config",
        components: [
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint256" },
          { type: "uint64" },
          { type: "uint64" },
          { type: "uint64" },
          { type: "uint64" },
          { type: "uint64" },
          { type: "uint64" },
          { type: "bool" },
          { type: "bool" },
          { type: "bool" },
        ],
      },
    ],
    name: "getConfig",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "bytes32", name: "", internalType: "bytes32" }],
    name: "getLatestSyncedHeader",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "bytes32", name: "", internalType: "bytes32" }],
    name: "getSyncedHeader",
    inputs: [{ type: "uint256", name: "number", internalType: "uint256" }],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "invalidateBlock",
    inputs: [
      { type: "bytes", name: "txList", internalType: "bytes" },
      { type: "uint8", name: "hint", internalType: "enum LibInvalidTxList.Hint" },
      { type: "uint256", name: "txIdx", internalType: "uint256" },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "uint256", name: "", internalType: "uint256" }],
    name: "latestSyncedL1Height",
    inputs: [],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "address", name: "", internalType: "address payable" }],
    name: "resolve",
    inputs: [
      { type: "string", name: "name", internalType: "string" },
      { type: "bool", name: "allowZeroAddress", internalType: "bool" },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [{ type: "address", name: "", internalType: "address payable" }],
    name: "resolve",
    inputs: [
      { type: "uint256", name: "chainId", internalType: "uint256" },
      { type: "string", name: "name", internalType: "string" },
      { type: "bool", name: "allowZeroAddress", internalType: "bool" },
    ],
  },
  {
    type: "event",
    name: "BlockInvalidated",
    inputs: [{ type: "bytes32", name: "txListHash", indexed: true }],
    anonymous: false,
  },
  {
    type: "event",
    name: "HeaderSynced",
    inputs: [
      { type: "uint256", name: "srcHeight", indexed: true },
      { type: "bytes32", name: "srcHash", indexed: false },
    ],
    anonymous: false,
  },
  { type: "error", name: "ERR_INVALID_HINT", inputs: [] },
  { type: "error", name: "ERR_INVALID_TX_IDX", inputs: [] },
  { type: "error", name: "ERR_PARAMS_NOT_DEFAULTS", inputs: [] },
  { type: "error", name: "ERR_VERIFICAITON_FAILURE", inputs: [] },
  { type: "error", name: "L2_INVALID_CHAIN_ID", inputs: [] },
  { type: "error", name: "L2_INVALID_GAS_PRICE", inputs: [] },
  { type: "error", name: "L2_INVALID_SENDER", inputs: [] },
  { type: "error", name: "L2_PUBLIC_INPUT_HASH_MISMATCH", inputs: [] },
  { type: "error", name: "RESOLVER_DENIED", inputs: [] },
  { type: "error", name: "RESOLVER_INVALID_ADDR", inputs: [] },
];
